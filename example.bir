module main

import std
import a.b as c

interface Displayable::<Z> {
    function show()
}

struct Test::<T> {
    a: T
    b: int
}

implement Test::<T> {
    init(a: T, b: int) {
        this.a = a
        this.b = b
    }

    function add(): int {
        return a + b
    }
}

implement Test {
    function show() {
        print(a + " " + b)
    }
}

function add::<T>(a: T, b: T): T {
	return a + b
}

function showMe(s: Displayable) {
    s.show()
}

const PI = 3.14

function main(): int {
	l = list::<int>()

    var result = add::<float>(1.0, 2.0)

	var d: dictionary<string, list<int>> = dict::<string, list<int>>()

    var result = multiply(1.0, 2.0)

    var t = Test(10, 20)

    var sum: int = t.add()

	l[1] = 10
	print(l["hello"])

	if not start() {
        showMe(t)
	}

    if a and b or c != d and e == f {
        showMe(t)()
    }

    var iter = iterator()
	while iter.next() as item {
		print(item)
	}

	if add(1, 2) as result > 10 {
		print(result)
	}

	with open() as f: file {
        text = f.read()
	}

	with open(asd) as file

    for line in file {
        print(line)
    }

    var i = 0
    while i < 10 {
        i = i + 1
    }

    return 0
}